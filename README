# Proyecto: Biblioteca DGG

## Resumen
El proyecto consiste en desarrollar una aplicación web para la gestión de préstamos y devoluciones de libros en una biblioteca. El sistema permitirá a los usuarios buscar libros, gestionar préstamos, realizar devoluciones y recibir notificaciones automáticas sobre la disponibilidad de los libros. También incluirá una plataforma para la administración del inventario de libros y la gestión de usuarios. Se utilizarán tecnologías como HTML, CSS, PHP, JavaScript, React y MySQL. El proyecto será desplegado en un entorno de nube para facilitar su acceso.

## Abstract
The project aims to develop a web application for managing the lending and returning of books in a library. Users will be able to search for books, manage loans, make returns, and receive notifications about book availability. Additionally, an admin platform will be provided for inventory and user management. Technologies like HTML, CSS, PHP, JavaScript, React, and MySQL will be used. The system will be deployed in a cloud environment for ease of access.

## Introducción: Objetivos y Motivación

### Objetivos:
- Desarrollar una aplicación web que permita gestionar el inventario, la recepción y el préstamo de libros de una biblioteca.
- Implementar un sistema de gestión de usuarios con roles diferenciados (administradores y lectores).
- Proveer una plataforma segura y accesible, cumpliendo con los estándares WCAG 2.1 de accesibilidad.
- Desplegar la aplicación en un entorno de nube, como AWS o Heroku.

### Motivación:
La creciente necesidad de automatizar y digitalizar procesos administrativos, como el préstamo de libros, motivó la creación de este proyecto. Las bibliotecas con un gran volumen de usuarios requieren soluciones tecnológicas que optimicen sus recursos y mejoren la experiencia del usuario. La implementación de tecnologías actuales permitirá ofrecer un servicio más eficiente y accesible.

## Tecnologías y Herramientas Utilizadas

### Frontend:
- **HTML5**: Para la estructura y contenido de las páginas web.
- **CSS3**: Para la estilización y diseño responsivo de la interfaz.
- **JavaScript**: Para la interacción cliente-servidor y la manipulación del DOM.
- **Bootstrap**: Para la implementación rápida de un diseño responsivo y consistente.
- **React.js**: Para la construcción de interfaces de usuario dinámicas y eficientes en la gestión del estado.

### Backend:
- **PHP**: Para la lógica del servidor, procesamiento de datos y manejo de solicitudes.
- **Node.js** (en consideración): Posible uso para servicios adicionales en la arquitectura del backend, especialmente para APIs REST.

### Base de Datos:
- **MySQL**: Para la gestión del inventario de libros, usuarios y registros de préstamos.

### Otros:
- **AJAX & JSON**: Para la comunicación asincrónica entre el frontend y backend.
- **GitHub**: Para el control de versiones y la colaboración entre los miembros del equipo.
- **Heroku / AWS**: Para el despliegue del proyecto en un entorno de producción en la nube.

## Estimación de Recursos y Planificación

### Recursos Necesarios:

#### Hardware:
- Ordenadores para el desarrollo y pruebas locales.
- Servidor para el alojamiento del sistema en la nube (Heroku/AWS).

#### Software:
- IDE para el desarrollo (Visual Studio Code, IntelliJ IDEA, entre otros).
- Gestor de bases de datos (MySQL Workbench).
- Herramientas para control de versiones y colaboración (GitHub).

#### Tiempo:
- Tiempo estimado para el desarrollo completo: 4 meses.
- Distribución de tareas en fases por cada miembro del equipo.

### Planificación:

#### Mes 1:
- Definición de requisitos del sistema.
- Diseño de la base de datos y estructura inicial del proyecto.
- Planificación del desarrollo.

#### Mes 2:
- Desarrollo del frontend con HTML, CSS, Bootstrap y React.
- Implementación del backend con PHP y MySQL.
- Integración del frontend con el backend.

#### Mes 3:
- Pruebas de la funcionalidad del sistema.
- Mejoras de seguridad (autenticación, protección contra XSS, SQL Injection).
- Optimización de la accesibilidad para cumplir con WCAG 2.1.

#### Mes 4:
- Despliegue en la nube (Heroku o AWS).
- Documentación técnica y presentación final del proyecto.

## Desarrollo: Análisis (Requisitos)

### Requisitos Funcionales:

#### Gestión de Usuarios:
- Registro, inicio de sesión y autenticación de usuarios.
- Diferenciación de roles (administradores y lectores).
- Administración de cuentas de usuario.

#### Gestión de Libros:
- Administración de inventario: Añadir, editar y eliminar libros.
- Búsqueda y filtrado de libros por los usuarios.
- Implementación de un sistema de reservas de libros.

#### Préstamos y Devoluciones:
- Gestión de préstamos y devoluciones de libros.
- Registro histórico de préstamos.
- Notificaciones para fechas de devolución y disponibilidad de libros.

#### Pagos:
- Integración con plataformas de pago como PayPal para el cobro de multas por retrasos.

### Requisitos No Funcionales:

#### Seguridad:
- Autenticación segura y gestión de sesiones.
- Protección contra vulnerabilidades comunes (XSS, SQL Injection).
- Cifrado de contraseñas y otros datos sensibles.

#### Escalabilidad:
- Arquitectura preparada para la expansión del sistema en el futuro (nuevas funcionalidades, más usuarios).

#### Accesibilidad y Usabilidad:
- Cumplimiento de las directrices de accesibilidad WCAG 2.1 nivel A.
- Interfaz intuitiva y fácil de usar para todos los usuarios.

## Bibliografía y Webgrafía

A continuación, se irán añadiendo las referencias utilizadas a lo largo del desarrollo del proyecto:

- MDN Web Docs. (2024). HTML5, CSS3, JavaScript resources.  
  URL: https://developer.mozilla.org
- Bootstrap Documentation. (2024). Bootstrap 5 - The world’s most popular front-end open source toolkit.  
  URL: https://getbootstrap.com
- React Documentation. (2024). React - A JavaScript library for building user interfaces.  
  URL: https://reactjs.org
- PHP Manual. (2024). PHP: Hypertext Preprocessor documentation.  
  URL: https://www.php.net

Este documento se actualizará conforme avance el desarrollo del proyecto.
